// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Textfield18 /> should be disabled 1`] = `
.c2.c2 {
  color: #CCC;
  font-size: 16px;
  line-height: 21px;
}

.c0 {
  margin-bottom: 32px;
  -webkit-flex-basis: 100%;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

.c0:hover .c1 {
  color: #222;
}

.c0:focus-within .c1 {
  color: #0A7BC2;
}

.c0 .c7 {
  margin-top: 8px;
}

.c5.c5 {
  border-bottom: 1px solid #CCC;
  color: #222 !important;
  font-size: 18px;
  line-height: 23px;
  padding: 6px 0;
  width: 100%;
}

.c5.c5.c5:hover,
.c5.c5.c5:active,
.c5.c5.c5:focus {
  color: #222;
}

.c5:hover {
  border-bottom-color: #666;
}

.c5.c5.c5:focus,
.c5.c5.c5:active {
  border-bottom-color: #0A7BC2;
}

.c5:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 {
  position: relative;
}

.c4:hover {
  border-bottom-color: #666;
}

.c4:hover .c3:focus,
.c4:hover .c4:active {
  border-bottom-color: #0A7BC2;
}

.c4:hover .c3:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 .c9 {
  padding: 0;
}

.c4 .c8 {
  top: 9px;
}

.c6.c6 {
  color: #CCC;
  font-size: 14px;
  line-height: 18px;
  margin-bottom: 0;
  margin-top: 6px;
}

<div
  className="c0"
>
  <label
    className="c1 c2"
    disabled={true}
    htmlFor="test"
  >
    Test label
  </label>
  <div
    className="c3 c4"
  >
    <input
      className="c5"
      disabled={true}
      id="test"
      name="test"
      onChange={[Function]}
      type="text"
    />
  </div>
  <p
    className="c6"
    disabled={true}
  >
    Test inline help
  </p>
</div>
`;

exports[`<Textfield18 /> should render as a password input 1`] = `
.c2.c2 {
  color: #666;
  font-size: 16px;
  line-height: 21px;
}

.c0 {
  margin-bottom: 32px;
  -webkit-flex-basis: 100%;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

.c0:hover .c1 {
  color: #222;
}

.c0:focus-within .c1 {
  color: #0A7BC2;
}

.c0 .c7 {
  margin-top: 8px;
}

.c5.c5 {
  border-bottom: 1px solid #7D7D7D;
  color: #222 !important;
  font-size: 18px;
  line-height: 23px;
  padding: 6px 0;
  width: 100%;
}

.c5.c5.c5:hover,
.c5.c5.c5:active,
.c5.c5.c5:focus {
  color: #222;
}

.c5:hover {
  border-bottom-color: #666;
}

.c5.c5.c5:focus,
.c5.c5.c5:active {
  border-bottom-color: #0A7BC2;
}

.c5:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 {
  position: relative;
}

.c4:hover {
  border-bottom-color: #666;
}

.c4:hover .c3:focus,
.c4:hover .c4:active {
  border-bottom-color: #0A7BC2;
}

.c4:hover .c3:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 .c9 {
  padding: 0;
}

.c4 .c8 {
  top: 9px;
}

.c6.c6 {
  color: #7D7D7D;
  font-size: 14px;
  line-height: 18px;
  margin-bottom: 0;
  margin-top: 6px;
}

<div
  className="c0"
>
  <label
    className="c1 c2"
    htmlFor="test"
  >
    Test label
  </label>
  <div
    className="c3 c4"
  >
    <input
      className="c5"
      id="test"
      name="test"
      onChange={[Function]}
      type="password"
    />
  </div>
  <p
    className="c6"
  >
    Test inline help
  </p>
</div>
`;

exports[`<Textfield18 /> should render correctly 1`] = `
.c2.c2 {
  color: #666;
  font-size: 16px;
  line-height: 21px;
}

.c0 {
  margin-bottom: 32px;
  -webkit-flex-basis: 100%;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

.c0:hover .c1 {
  color: #222;
}

.c0:focus-within .c1 {
  color: #0A7BC2;
}

.c0 .c7 {
  margin-top: 8px;
}

.c5.c5 {
  border-bottom: 1px solid #7D7D7D;
  color: #222 !important;
  font-size: 18px;
  line-height: 23px;
  padding: 6px 0;
  width: 100%;
}

.c5.c5.c5:hover,
.c5.c5.c5:active,
.c5.c5.c5:focus {
  color: #222;
}

.c5:hover {
  border-bottom-color: #666;
}

.c5.c5.c5:focus,
.c5.c5.c5:active {
  border-bottom-color: #0A7BC2;
}

.c5:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 {
  position: relative;
}

.c4:hover {
  border-bottom-color: #666;
}

.c4:hover .c3:focus,
.c4:hover .c4:active {
  border-bottom-color: #0A7BC2;
}

.c4:hover .c3:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 .c9 {
  padding: 0;
}

.c4 .c8 {
  top: 9px;
}

.c6.c6 {
  color: #7D7D7D;
  font-size: 14px;
  line-height: 18px;
  margin-bottom: 0;
  margin-top: 6px;
}

<div
  className="c0"
>
  <label
    className="c1 c2"
    htmlFor="test"
  >
    Test label
  </label>
  <div
    className="c3 c4"
  >
    <input
      className="c5"
      id="test"
      name="test"
      onChange={[Function]}
      type="text"
    />
  </div>
  <p
    className="c6"
  >
    Test inline help
  </p>
</div>
`;

exports[`<Textfield18 /> should show error message 1`] = `
.c8 {
  fill: currentColor;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c7 {
  background-color: #D24A1D;
  border-radius: 3px;
  color: #FFF;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  padding: 0.1875rem 0.5rem 0.1875rem 0.25rem;
  position: relative;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

.c7:before {
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  content: " ";
  height: 0;
  position: absolute;
  width: 0;
}

.c7:before {
  border-bottom: 5px solid #D24A1D;
  left: 8px;
  top: -5px;
}

.c9 {
  font-size: 0.875rem;
  line-height: 1.125rem;
  margin-bottom: 0;
  margin-left: 0.25rem;
}

.c2.c2 {
  color: #D24A1D;
  font-size: 16px;
  line-height: 21px;
}

.c0 {
  margin-bottom: 32px;
  -webkit-flex-basis: 100%;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
}

.c0:hover .c1 {
  color: #222;
}

.c0:focus-within .c1 {
  color: #0A7BC2;
}

.c0 .c6 {
  margin-top: 8px;
}

.c5.c5 {
  border-bottom: 1px solid #D24A1D;
  color: #222 !important;
  font-size: 18px;
  line-height: 23px;
  padding: 6px 0;
  width: 100%;
}

.c5.c5.c5:hover,
.c5.c5.c5:active,
.c5.c5.c5:focus {
  color: #222;
}

.c5:hover {
  border-bottom-color: #a53a17;
}

.c5.c5.c5:focus,
.c5.c5.c5:active {
  border-bottom-color: #D24A1D;
}

.c5:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 {
  position: relative;
}

.c4:hover {
  border-bottom-color: #666;
}

.c4:hover .c3:focus,
.c4:hover .c4:active {
  border-bottom-color: #0A7BC2;
}

.c4:hover .c3:disabled {
  border-bottom-color: #CCC;
  cursor: not-allowed;
}

.c4 .c12 {
  padding: 0;
}

.c4 .c11 {
  top: 9px;
}

.c10.c10 {
  color: #7D7D7D;
  font-size: 14px;
  line-height: 18px;
  margin-bottom: 0;
  margin-top: 6px;
}

<div
  className="c0"
>
  <label
    className="c1 c2"
    htmlFor="test"
  >
    Test label
  </label>
  <div
    className="c3 c4"
  >
    <input
      className="c5"
      id="test"
      name="test"
      onChange={[Function]}
      type="text"
    />
  </div>
  <div
    className="c6 c7"
    color="error"
  >
    <span
      className="c8"
    >
      <svg
        aria-label="Error icon"
        height="18"
        viewBox="0 0 18 18"
        width="18"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M9.94 2.6l6.37 10.79c.48.8.03 1.61-.91 1.61H2.6c-.93 0-1.38-.81-.9-1.61L8.05 2.6c.48-.8 1.4-.8 1.88 0zm-1.02.5L2.55 13.9c-.08.14-.1.1.06.1H15.4c.16 0 .14.04.05-.1L9.08 3.1c-.09-.14-.07-.14-.16 0zM9 11a1 1 0 0 1 1 1 1 1 0 0 1-1 1c-.54 0-1-.46-1-1a1 1 0 0 1 1-1zm0-5c.7 0 1 .91 1 1.99C10 9.09 9.7 10 9 10s-1-.93-1-2.01C8 6.92 8.31 6 9 6z"
          fillRule="evenodd"
        />
      </svg>
    </span>
    <p
      className="c9"
    >
      Value too long
    </p>
  </div>
  <p
    className="c10"
  >
    Test inline help
  </p>
</div>
`;
